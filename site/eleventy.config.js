import {rm} from "node:fs/promises"
import {tmpdir} from "node:os"
import browserslist from "browserslist"
import * as esbuild from "esbuild"
import * as terser from "html-minifier-terser"
import * as lightning from "lightningcss"

/**
 * @param {any} uc
 * @returns {unknown}
 */
export default function (uc) {
  uc.on("eleventy.before", /** @param {any} c */ async (c) => {
    await rm(c.dir.output, {recursive: true, force: true})
  })

  uc.addPassthroughCopy({"static": "."})

  uc.addTransform("terser", /** @param {string} c @param {string} f */ async (c, f) => {
    if (f.endsWith(".html")) {
      return terser.minify(c, {
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        decodeEntities: true,
        includeAutoGeneratedTags: false,
        removeAttributeQuotes: true,
        removeComments: true,
        removeEmptyAttributes: true,
        removeRedundantAttributes: true,
        sortAttributes: true,
      })
    }
    return c
  })

  uc.addGlobalData("css", async () => {
    const l = browserslist("> 0.2%")
    const t = lightning.browserslistToTargets(l)
    const r = await lightning.bundleAsync({
      drafts: {
        customMedia: true,
      },
      filename: "main.css",
      minify: true,
      targets: t,
    })
    return String(r.code)
  })

  uc.addGlobalData("js", async () => {
    const r = await esbuild.build({
      bundle: true,
      entryPoints: ["main.js"],
      minify: true,
      outdir: tmpdir(),
      write: false,
    })
    return Buffer.from(r.outputFiles[0].contents).toString()
  })

  return {
    dir: {
      input: ".",
      output: "dist",
    },
  }
}
